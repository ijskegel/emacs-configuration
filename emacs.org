#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* TODO
- [ ] replace company with [[https://github.com/minad/corfu][consult]]
- [ ] remove references to counsel -> replace with [[https://github.com/minad/consult][consult]] alternatives
- [ ] setup embark

* General information

#+begin_src emacs-lisp

  ;; NOTE: init.el is generated from this emacs.org
  ;;
  ;; The initial version of this configuration is inspired by System Crafters Emacs from Scratch series

#+end_src

* Platform specific elements

#+begin_src emacs-lisp

  (cond ((eq system-type 'gnu/linux)
         ;; directory where I store all my notes and GTD files
         (setq ijskegel-notes-directory "/media/sf_notes")
         ;; font names
         (setq ijskegel-default-font "JetBrainsMono NF")
         (setq ijskegel-fixed-pitch-font "JetBrainsMono NF")
         (setq ijskegel-variable-pitch-font "JetBrainsMono NF")
         ;; Easily change the font size and transparance, e.g. for use on monitors with different resolutions
         (defvar ijskegel/default-font-size 90)
         (defvar ijskegel/default-variable-font-size 100)
         (defvar ijskegel/frame-transparency '(95 . 95))
         ))
  (cond ((eq system-type 'windows-nt)
         ;; directory where I store all my notes and GTD files
         (setq ijskegel-notes-directory "c:/Users/lochep/Documents/notes")
         ;; font names
         (setq ijskegel-default-font "JetBrainsMono NF")
         (setq ijskegel-fixed-pitch-font "JetBrainsMono NF")
         (setq ijskegel-variable-pitch-font "Calibri")
         ;; Easily change the font size and transparance, e.g. for use on monitors with different resolutions
         (defvar ijskegel/default-font-size 75)
         (defvar ijskegel/default-variable-font-size 100)
         (defvar ijskegel/frame-transparency '(100 . 100))
         ))

#+end_src

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (blink-cursor-mode 0)       ; Do not blink the cursor
  (menu-bar-mode -1)          ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; automatically select help window, close with 'q'
  (setq help-window-select t)

  (column-number-mode)
  (global-hl-line-mode t)

  ;; scroll behaviour more like in vim
  (setq scroll-conservatively most-positive-fixnum)
  (setq scroll-step 1)
  (setq scroll-margin 5)

  ;; show line numbers
  (global-display-line-numbers-mode 1)
  ;; (setq display-line-numbers-type 'relative) enable for relative line numbers

  ;; automatically reverts the buffer when its visited file changes on disk
  (global-auto-revert-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha ijskegel/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,ijskegel/frame-transparency))
  ;; (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (add-to-list 'default-frame-alist '(height . 70))
  (add-to-list 'default-frame-alist '(width . 125))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  lisp-interaction-mode-hook
                  dired-mode-hook
                  ibuffer-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; open buffer-menu and switch to it
  (global-set-key (kbd "C-x C-b") 'buffer-menu-other-window)

  ;; center frame on current monitor
  ;; credit: https://christiantietze.de/posts/2022/04/emacs-center-window-current-monitor-simplified/
  (defun ijskegel/frame-recenter (&optional frame)
    "Center FRAME on the screen.
  FRAME can be a frame name, a terminal name, or a frame.
  If FRAME is omitted or nil, use currently selected frame."
    (interactive)
    (unless (eq 'maximised (frame-parameter nil 'fullscreen))
      (modify-frame-parameters
       frame '((user-position . t) (top . 0.5) (left . 0.5)))))

  (global-set-key (kbd "M-c") #'ijskegel/frame-recenter)

#+End_src

** Font Configuration

I am using the [[https://www.nerdfonts.com/][JetBrains Mono Nerd]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] (linux) or Calibri (windows) fonts for this configuration which will more than likely need to be installed on your machine. Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp

  ;; Set the default face
  (set-face-attribute 'default nil :family ijskegel-default-font :height ijskegel/default-font-size :weight 'regular)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font ijskegel-fixed-pitch-font :height ijskegel/default-font-size :weight 'regular)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font ijskegel-variable-pitch-font :height ijskegel/default-variable-font-size)

#+end_src

** Color Theme

We use the 'modus operandi' theme from the [[https://protesilaos.com/emacs/modus-themes][modus-themes]] collection from prot.
doom-opera

#+begin_src emacs-lisp

  ;; (use-package modus-themes)
  ;; (setq modus-themes-org-blocks 'gray-background
  ;;       modus-themes-disable-other-themes t
  ;;       modus-themes-common-palette-overrides 
  ;;           '((border-mode-line-active bg-mode-line-active)
  ;;             (border-mode-line-inactive bg-mode-line-inactive))
  ;;       modus-operandi-palette-overrides
  ;;           '((fg-main "#000000")
  ;;             (bg-main "#faf8f5")
  ;;             (bg-region "#efdfff")
  ;;             (fg-region unspecified)
  ;;             (bg-inactive "#e6e4e1")
  ;;             (bg-hl-line "#e6e4e1")
  ;;             (comment yellow-faint))
  ;;       modus-vivendi-palette-overrides
  ;;           '((fg-main "#fdf3ec")
  ;;             (bg-main "#24242d")
  ;;             (bg-region "#4f3d88")
  ;;             (fg-region unspecified)
  ;;             (bg-inactive "#2f2f3b")
  ;;             (bg-hl-line "#2f2f3b")
  ;;             (comment yellow-faint)
  ;;             (string green)))
  ;; (load-theme 'modus-operandi :no-confirm)

#+end_src

Trying the doom-opera theme...

#+begin_src emacs-lisp

  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-opera :no-confirm)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run =M-x all-the-icons-install-fonts= so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Preserve Minibuffer History

Persist history over Emacs restarts, usefull because Vertico sorts by history position

#+begin_src emacs-lisp

  (use-package savehist
    :init
    (setq history-length 25)
    (savehist-mode))

#+end_src

** Vertico

[[https://github.com/minad/vertico][Vertico]] provides a performant and minimalistic vertical completion UI based on the default completion system.

#+begin_src emacs-lisp

  (use-package vertico
    :init
    (vertico-mode)
    ;; enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)
    ;; use evil-like bindings for next and previous
    :bind (:map vertico-map
		("C-j" . vertico-next)
		("C-k" . vertico-previous)))

#+end_src

** Orderless completion

[[https://github.com/oantolin/orderless][Orderless]] provides an orderless completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order

#+begin_src emacs-lisp

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles . (partial-completion))))))

#+end_src

** Completion annotations with Marginalia

[[https://github.com/minad/marginalia][Marginalia]] provides helpful annotations for various types of minibuffer completions.

#+begin_src emacs-lisp

(use-package marginalia
  ;; bind `marginalia-cycle' only in the minibuffer
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :init
  (marginalia-mode))
  
#+end_src

** Consult

#+begin_src emacs-lisp

#+end_src

** Embark

Completion actions with Embark

#+begin_src emacs-lisp

  ;; (setup (:pkg embark)
  ;; 	 (:also-load embark-consult)
  ;; 	 (:global "C-S-a" embark-act)
  ;; 	 (:with-map minibuffer-local-map
  ;; 		    (:bind "C-d" embark-act))

  ;; 	 ;; Show Embark actions via which-key
  ;; 	 (setq embark-action-indicator
  ;; 	       (lambda (map)
  ;; 		 (which-key--show-keymap "Embark" map nil nil 'no-paging)
  ;; 		 #'which-key--hide-popup-ignore-command)
  ;; 	       embark-become-indicator embark-action-indicator))

#+end_src

* Keybinding Configuration

** open configuration
Two different ways to open this configuration file quickly, press =F6= or using registers =C-x r j e=

#+begin_src emacs-lisp

  (set-register ?e '(file . "~/.emacs.d/emacs.org"))
  (global-set-key (kbd "<f6>") (lambda() (interactive)(find-file "~/.emacs.d/emacs.org")))

#+end_src

** evil mode

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience. [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; optional, is set to t by default
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-kill-on-visual-paste nil)
    (setq evil-symbol-word-search t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    (evil-set-undo-system 'undo-redo))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

#+end_src

** Switch to last buffer

#+begin_src emacs-lisp

  (defun ijskegel/switch-to-last-buffer ()
    "Switch to previously open buffer.
  Repeated invocations toggle between the two most recently opened buffers."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))

  (global-set-key (kbd "M-o") #'ijskegel/switch-to-last-buffer)

#+end_src

* Org mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Basic config
This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.

#+begin_src emacs-lisp

  (defun ijskegel/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . ijskegel/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"))

#+end_src

** Keybindings

#+begin_src emacs-lisp

  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)

#+end_src

** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+End_src

** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun ijskegel/org-mode-visual-fill ()
    (setq visual-fill-column-width 120
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . ijskegel/org-mode-visual-fill))

#+end_src

** Getting Things Done
Below is the configuration used for my implementation of the Getting Things Done Method from David Allen. It is based on [[denote:20230228T130820][Orgmode for GTD]].
Use jumpt to register g (=C-x r j g=) to open the GTD directory in Dired

#+begin_src emacs-lisp

  (setq ijskegel-gtd-directory (expand-file-name "gtd" ijskegel-notes-directory))

  (set-register ?g (cons 'file ijskegel-gtd-directory))

  (setq ijskegel-inbox-file (expand-file-name "inbox.org" ijskegel-gtd-directory))
  (setq ijskegel-gtd-file (expand-file-name "gtd.org" ijskegel-gtd-directory))
  (setq ijskegel-personal-file (expand-file-name "personal.org" ijskegel-gtd-directory))
  (setq ijskegel-tickler-file (expand-file-name "tickler.org" ijskegel-gtd-directory))
  (setq ijskegel-someday-file (expand-file-name "someday.org" ijskegel-gtd-directory))

  (setq org-agenda-files (list ijskegel-inbox-file
                               ijskegel-gtd-file
                               ijskegel-personal-file
                               ijskegel-tickler-file))

  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline ijskegel-inbox-file "Tasks")
                                 "* TODO %i%?")
                                ("T" "Tickler" entry
                                 (file+headline ijskegel-tickler-file "Tickler")
                                 "* %i%? \n %U")))

  (setq org-refile-targets '((ijskegel-gtd-file :maxlevel . 2)
                             (ijskegel-personal-file :level . 1)
                             (ijskegel-someday-file :level . 1)
                             (ijskegel-tickler-file :maxlevel . 2)))

  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

  (setq org-agenda-custom-commands 
        '(("w" "Work" tags-todo "@work"
           ((org-agenda-overriding-header "Work")
            (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
          ("h" "Home" tags-todo "@home"
           ((org-agenda-overriding-header "Home")
            (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))))

  (defun my-org-agenda-skip-all-siblings-but-first ()
    "Skip all but the first non-done entry."
    (let (should-skip-entry)
      (unless (org-current-is-todo)
        (setq should-skip-entry t))
      (save-excursion
        (while (and (not should-skip-entry) (org-goto-sibling t))
          (when (org-current-is-todo)
            (setq should-skip-entry t))))
      (when should-skip-entry
        (or (outline-next-heading)
            (goto-char (point-max))))))

  (defun org-current-is-todo ()
    (string= "TODO" (org-get-todo-state)))

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("cpp" . "src cpp")))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =ijskegel/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files. First time evaluate the code below and re-enable org-mode using =M-x org-mode=. After that save this buffer and all blocks will be tangled. Restart emacs and all packages will be installed and configured.

#+begin_src emacs-lisp

  ;; Automatically tangle our emacs.org config file when we save it
  (defun ijskegel/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
			(expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ijskegel/org-babel-tangle-config)))

#+end_src

* Development

** General shortcuts

#+begin_src emacs-lisp

  (global-set-key (kbd "<f4>") 'ff-find-other-file)

#+end_src

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  ;; Work with Git forges, such as Github and Gitlab, from the comfort of Magit and the rest of Emacs
  ;;(use-package forge
  ;;  :after magit)

#+end_src

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Tree-sitter

To get better highlighting in source code [[https://tree-sitter.github.io/tree-sitter/][tree-sitter]] can be used. For emacs 29+ tree-sitter is integrated but for older versions this [[https://emacs-tree-sitter.github.io][emacs package]] can be used. You also need to install the [[https://github.com/tree-sitter/tree-sitter/releases][tree-sitter binary]] and make sure that it is in your path as descsribed in [[https://olddeuteronomy.github.io/post/a-tree-sitter-config-that-works/][A Tree Sitter Config That Works]].

#+begin_src emacs-lisp

  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  ;; enable it globally and enable highlighting always if major mode is known in tree-sitter
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

#+end_src

** OpenScad

Features:
- syntax highlighting
- basic completions, press =M-<TAB>=
- preview rendered model in separate window, press =C-c C-c=
- opens buffer in OpenSCAD, press =C-c C-0=
- Export buffer with OpenSCAD (press C-c C-e)
- Flymake support (enable flymake-mode in scad-mode buffers)
- Org Babel support (scad source blocks)
- lsp-mode or eglot: the openscad-lsp server can be used with scad-mode

#+begin_src emacs-lisp

  (use-package scad-mode)

#+end_src

* File Management

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

#+end_src

* Notetaking
For taking notes I use the [[https://protesilaos.com/emacs/denote][denote]] package from prot. There is a difference between notes and journals, each end up in their respective directory.
Use jumpt to register n (=C-x r j g=) to open the notes directory in Dired

  #+begin_src emacs-lisp

    (use-package denote)
    (setq denote-directory (expand-file-name "notes" ijskegel-notes-directory))
    (setq denote-known-keywords '("emacs" "benchmark" "asml" "tc"))
    ;; default is org, others are markdown+(TOML, YAML) and plain text
    (setq denote-file-type nil)

    (set-register ?n (cons 'file denote-directory))

    ;; Enable fontification in Dired for the notes directory and its references subdirectory
    (setq denote-dired-directories
          (list denote-directory
          (thread-last denote-directory (expand-file-name "references"))))

    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)

  #+end_src


Another usefull small package is [[https://protesilaos.com/emacs/tmr][tmr]] from prot. I use it to restrict my time spend on reading and restructuring my notes

  #+begin_src emacs-lisp :tangle no

    (use-package tmr)
    (setq tmr-sound-file nil)
    (setq tmr-notification-urgency 'normal)

  #+end_src

* Development

** Google C/C++ Style
Automatically load the Google C/C++ Style that we are using in the Benchmark ASML Thin Client project

*** Keybindings
=C-x h= select the entire buffer
=C-M-\= ident region

*** Configuration
#+begin_src emacs-lisp

  (load-file "~/.emacs.d/google-c-style.el")
  (add-hook 'c-mode-common-hook 'google-set-c-style)

#+end_src

** company

Use company for code completion

#+begin_src emacs-lisp

  (use-package company
    :config
    (global-company-mode))

#+end_src

** eglot

Use eglot as LSP client. For now start it manually with =M-x eglot=

*** Project setup

For Qt projects you need to have a compile_commands.json file present else Qt header files etc. will not be found. Depending on the type of project you can create one using the following steps:
For more information see the [[https://github.com/MaskRay/ccls/wiki/Project-Setup#compile_commandsjson][compile_commands.json]] section on the ccls wiki.

*CMake*

#+begin_src shell :tangle no

  cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
  ln -s Debug/compile_commands.json .

#+end_src

*qMake*

For creation the compile_commands.json you can create 'bear'. Refer to [[https://lahtela.me/2020/05/21/setting-up-emacs-for-qt-development.html][this page]].

#+begin_src shell :tangle no

  sudo apt install bear

  # make sure your application compiles and then execute the following
  make clean
  bear make
  # The compile_commands.json file should be in the root of the project. If you build in a subdirectory than create a symlink.

#+end_src

*** Keybindings 

=M-x eglot= start eglot for current buffer
=C-c e f= initiate (company) completion
=C-c e j= flymake-goto-next-error
=C-c e k= flymake-goto-prev-error
=C-c e r= rename symbol under cursor

*** Actual configuration

#+begin_src emacs-lisp

  (use-package eglot)

  (require 'eglot)
  (define-key eglot-mode-map (kbd "C-c <tab>") #'company-complete) ;; initiate the completion
  (define-key eglot-mode-map (kbd "C-c e j ") #'flymake-goto-next-error)
  (define-key eglot-mode-map (kbd "C-c e k ") #'flymake-goto-prev-error)
  (define-key eglot-mode-map (kbd "C-c e r ") #'eglot-rename)

#+end_src
 
* Server

When starting emacs start it in server mode and add a hook to make sure to bring the emacs window to the front when starting emacsclient.

#+begin_src emacs-lisp

  (server-start)
  (add-hook 'server-switch-hook (lambda () (select-frame-set-input-focus (selected-frame))))

#+end_src
